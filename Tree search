pub struct Tree<T> {

	key : Option<T>,

	left : Option<Box<Tree<T>>>,

	right : Option<Box<Tree<T>>>,

}



impl<T: Ord> Tree<T> {

	/// Creates an empty tree

	pub fn new() -> Self {

		Tree {key : None, left : None, right : None}

	}


	/// Returns `false` if `key` already exists in the tree, and `true` otherwise.
	pub fn insert(&mut self, key: T) -> bool {
		 
		
		match self.key{
			 Some(ref i)=>{
				if &key==i{
					return false;
				}
				if &key<i{
					 
					 match self.left{
						Some(ref mut node_2)=> node_2.insert(key),
						None=>{
							let new_node=Tree{key:Some(key),left:None,right:None};
							self.left=Some(Box::new(new_node));
							return true;}}}
				else {
					 
					match self.right{
						Some(ref mut node_2)=>node_2.insert(key),
						None=>{
							let new_node=Tree{key:Some(key),left:None,right:None};
							self.right=Some(Box::new(new_node));
							return true;}}}}
			
			 None => { self.key = Some(key); return true; },
			
		}
	}

	/// Returns `true` if `key` exists in the tree, and `false` otherwise.
	pub fn find(&self, key: &T) -> bool {
					let mut new_node =&None;
					match self.key{
						 Some(ref i)=>{
							if key==i{
								return true;
							}
							if key<i{
								 new_node=&self.left;
								 }
							else {
								new_node=&self.right;
								}}
						
						 None => {  return false; },
						
					}
					match new_node {

						&Some(ref a) => { return a.find(key); },
						&None => { return false; },

					}}

	/// Returns the preorder traversal of the tree.
	pub fn preorder(&self) -> Vec<&T> {
		let mut stack = Vec::new();
		
		match self.key{
			Some(ref i) => {stack.push(i);},
			None => {},
		}
		match self.left{
			Some(ref j) => {
				
				stack.extend(j.preorder());
			}
			None => {},
		}
		match self.right{
			Some(ref j) => {
				
				stack.extend(j.preorder());
							}
			None => {},
		}return stack;
		
	}

	/// Returns the inorder traversal of the tree.
	pub fn inorder(&self) -> Vec<&T> {
		let mut stack = Vec::new();
		match self.left{
			Some(ref j) => {
				
				stack.extend(j.inorder());
			}
			None => {},
		}

		match self.key{
			Some(ref i) => {stack.push(i);},
			None => {},
		}
				match self.right{
			Some(ref j) => {
				
				stack.extend(j.inorder());
							}
			None => {},
		}return stack;

	}

	/// Returns the postorder traversal of the tree.
	pub fn postorder(&self) -> Vec<&T> {
	let mut stack = Vec::new();
	match self.left{
		Some(ref j) => {
			
			stack.extend(j.postorder());
		}
		None => {},
	}
	match self.right{
		Some(ref j) => {
			
			stack.extend(j.postorder());
						}
		None => {},
	}

	match self.key{
		Some(ref i) => {stack.push(i);},
		None => {},
	}
		return stack;
	}
}
